// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H0psPjR35tXV6n8BAAD//xML/VkqUgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
